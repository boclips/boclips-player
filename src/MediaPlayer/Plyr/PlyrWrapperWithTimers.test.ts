import Plyr from 'plyr';
import { MaybeMocked } from 'ts-jest/dist/utils/testing';
import { mocked } from 'ts-jest/utils';
import { MediaPlayer } from '../MediaPlayer';
import {
  BoclipsPlayer,
  PrivatePlayer,
} from '../../BoclipsPlayer/BoclipsPlayer';
import { HasClientDimensions } from '../../test-support/types';
import PlyrWrapper from './PlyrWrapper';

jest.mock('../../BoclipsPlayer/BoclipsPlayer');
jest.mock('../../Events/Analytics');
jest.mock('./Addons/Addons');
jest.mock('../../ErrorHandler/ErrorHandler');
jest.mock('../../StreamingTechnique/StreamingTechniqueFactory');

let container: HTMLElement & HasClientDimensions = null;
let mediaPlayer: MediaPlayer;
let mockPlayer: MaybeMocked<PrivatePlayer> | PrivatePlayer;
let mockPlyr;

const mockedPlyr = mocked(Plyr);

function getLatestMockPlyrInstance() {
  return mockedPlyr.mock.instances[mockedPlyr.mock.instances.length - 1];
}

jest.useFakeTimers();

beforeEach(() => {
  mockedPlyr.mockClear();

  container = document.createElement('div') as any;
  container.__jsdomMockClientWidth = 700;

  mockPlayer = mocked(new BoclipsPlayer(container));
  mediaPlayer = new PlyrWrapper(mockPlayer);

  mockPlyr = getLatestMockPlyrInstance();
});

it(`disables captions when they are autogenerated`, () => {
  mockPlyr.__callEventCallback('play');

  jest.advanceTimersByTime(1000);

  expect(container.children.length).toEqual(1);
  expect(container.classList.contains('disable-cc')).toBeTruthy();
});
